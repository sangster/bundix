{
  description = "<%= project %>";

  inputs = {
    nixpkgs.url = github:NixOS/nixpkgs;
    flake-utils.url = github:numtide/flake-utils;
    bundix.url = github:sangster/bundix;
  };

  outputs = { self, nixpkgs, flake-utils, bundix }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pname = "<%= project %>";
        version = "0.0.1";
        pkgs = import nixpkgs {
          inherit system;
          overlays = [bundix.overlays.default];
        };

        gems = pkgs.bundixEnv {
          inherit system;
          name = "${pname}-${version}-bundler-env";
          ruby = pkgs.<%= ruby %>;
          gemfile = <%= gemfile_path %>;
          lockfile = <%= lockfile_path %>;
          gemset = <%= gemset_path %>;
        };
      in {
        packages = {
          # Example package:
          default = pkgs.stdenv.mkDerivation {
            inherit gems pname version;
            ruby = gems.wrappedRuby;
            phases = "installPhase";
            installPhase = ''
              mkdir -p $out/bin
              cat << EOF > "$out/bin/${pname}"
              #!/bin/sh -e
              exec $ruby/bin/ruby << RUBY
              require 'bundler'
              puts "Bundled rubygems:"
              Bundler.setup.gems.map(&:name).sort.each do |gem|
                puts " - #{gem}"
              end
              RUBY
              EOF
              chmod +x "$out/bin/${pname}"
            '';
          };
          bundled-gems = gems;
        };

        apps.bundix = flake-utils.lib.mkApp { drv = pkgs.bundix; };

        devShell = pkgs.mkShell {
          buildInputs = [gems gems.wrappedRuby];
        };
      }
    );
}

{
  description = "<%= project %>";

  inputs = {
    nixpkgs.url = github:NixOS/nixpkgs;
    bundix.url = github:sangster/bundix;
  };

  outputs = { self, nixpkgs, bundix }:
    let
      pname = "<%= project %>";
      system = "x86_64-linux";
      version = "0.0.1";
      pkgs = import nixpkgs {
        inherit system;
        overlays = [bundix.overlays.default];
      };

      gems = pkgs.bundixEnv {
        inherit system;
        name = "${pname}-${version}-bundler-env";
        ruby = pkgs.<%= ruby %>;
        gemfile = <%= gemfile_path %>;
        lockfile = <%= lockfile_path %>;
        gemset = <%= gemset_path %>;
      };
    in {
      packages.${system} = {
        # Example package:
        default = pkgs.stdenv.mkDerivation {
          inherit gems pname version;
          ruby = gems.wrappedRuby;
          phases = "installPhase";
          installPhase = ''
            mkdir -p $out/bin
            cat << EOF > "$out/bin/${pname}"
            #!/bin/sh -e
            exec $ruby/bin/ruby << RUBY
            require 'bundler'
            puts "Bundled rubygems:"
            Bundler.setup.gems.map(&:name).sort.each do |gem|
              puts " - #{gem}"
            end
            RUBY
            EOF
            chmod +x "$out/bin/${pname}"
          '';
        };
        bundled-gems = gems;
      };

      apps.${system} = {
        bundix = { type = "app"; program = "${pkgs.bundix}/bin/bundix"; };
      };

      devShell.${system} = pkgs.mkShell {
        buildInputs = [gems gems.wrappedRuby];
      };
    };
}
